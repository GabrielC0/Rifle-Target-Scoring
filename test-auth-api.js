/**
 * Test de fonctionnement r√©el de l'API d'authentification
 * Ce script teste l'API en cours d'ex√©cution
 */

const API_BASE_URL = "http://localhost:3000";

async function testAuthAPI() {
  console.log("üîê Test de l'API d'Authentification");
  console.log("====================================\n");

  // Test 1: Connexion avec identifiants valides
  console.log("üìã Test 1: Connexion avec identifiants valides (root/admin)");
  try {
    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        username: "root",
        password: "admin",
      }),
    });

    const data = await response.json();

    if (response.ok && data.success) {
      console.log("‚úÖ PASS - Connexion r√©ussie");
      console.log(`   Token g√©n√©r√©: ${data.token.substring(0, 30)}...`);
      console.log(`   Utilisateur: ${data.user.username}`);
    } else {
      console.log("‚ùå FAIL - Connexion √©chou√©e");
      console.log(`   Erreur: ${data.error || "Erreur inconnue"}`);
    }
  } catch (error) {
    console.log("‚ùå FAIL - Erreur r√©seau");
    console.log(`   Erreur: ${error.message}`);
  }

  // Test 2: Connexion avec identifiants invalides
  console.log("\nüìã Test 2: Connexion avec identifiants invalides");
  try {
    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        username: "wrong",
        password: "wrong",
      }),
    });

    const data = await response.json();

    if (response.status === 401 && data.error === "Identifiants invalides") {
      console.log("‚úÖ PASS - Identifiants invalides correctement rejet√©s");
    } else {
      console.log("‚ùå FAIL - Comportement inattendu");
      console.log(`   Status: ${response.status}`);
      console.log(`   Data: ${JSON.stringify(data)}`);
    }
  } catch (error) {
    console.log("‚ùå FAIL - Erreur r√©seau");
    console.log(`   Erreur: ${error.message}`);
  }

  // Test 3: Requ√™te sans donn√©es
  console.log("\nüìã Test 3: Requ√™te sans identifiants");
  try {
    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({}),
    });

    const data = await response.json();

    if (response.status === 400 && data.error.includes("requis")) {
      console.log("‚úÖ PASS - Champs requis correctement valid√©s");
    } else {
      console.log("‚ùå FAIL - Validation des champs incorrecte");
      console.log(`   Status: ${response.status}`);
      console.log(`   Data: ${JSON.stringify(data)}`);
    }
  } catch (error) {
    console.log("‚ùå FAIL - Erreur r√©seau");
    console.log(`   Erreur: ${error.message}`);
  }

  // Test 4: Test de la route de sant√© (si elle existe)
  console.log("\nüìã Test 4: V√©rification de la route de sant√©");
  try {
    const response = await fetch(`${API_BASE_URL}/api/health`);

    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ PASS - API en fonctionnement");
      console.log(`   Status: ${data.status || "OK"}`);
    } else {
      console.log(
        "‚ö†Ô∏è  WARN - Route de sant√© non disponible (normal si pas impl√©ment√©e)"
      );
    }
  } catch (error) {
    console.log("‚ö†Ô∏è  WARN - Route de sant√© non accessible");
  }

  console.log("\nüèÅ Tests termin√©s!");
  console.log("\nüìù Instructions pour tester manuellement:");
  console.log("1. D√©marrer l'application: npm run dev");
  console.log("2. Aller sur http://localhost:3000/test");
  console.log("3. Observer le popup de redirection");
  console.log("4. Aller sur http://localhost:3000/classement");
  console.log("5. V√©rifier l'acc√®s libre √† la page");
}

// Ex√©cuter les tests si ce script est appel√© directement
if (require.main === module) {
  testAuthAPI().catch(console.error);
}

module.exports = { testAuthAPI };
